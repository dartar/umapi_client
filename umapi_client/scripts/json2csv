#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Converter for json output
"""

from umapi_client import config, logging

import json
import argparse
from sys import exit

__author__ = "ryan faulkner"
__email__ = 'rfaulkner@wikimedia.org'
__date__ = "2013-03-27"
__license__ = "GPL (version 2 or later)"


def parseargs():
    """
        Parse command line arguments. Returns *args*, the list of arguments
        left over after processing.
    """

    parser = argparse.ArgumentParser(
        description="Takes a Wikimedia user metrics API JSON file and "
                    "converts to xsv.",
        epilog="",
        conflict_handler="resolve",
        usage="umapi_client [url]"
    )

    parser.allow_interspersed_args = False

    # Global options.
    parser.add_argument('filenames', nargs='+')
    parser.add_argument('-s',
                        '--separator',
                        type=str,
                        default=',',
                        help='data separator')

    args = parser.parse_args()
    print args
    return args


def main():

    args = parseargs()

    # Read file
    logging.debug(__name__ + ' :: Attempting to read file(s)...')

    for filename in args.filenames:

        try:
            with open(config.JSON_DIR + filename, 'rb') as f:
                data = json.loads(f.read())

        # missing file or bad json
        except (IOError, ValueError) as e:
            logging.error(__name__ + ' :: ' + str(e))
            continue

        content = ''
        if 'header' in data:
            content += args.separator.join(data['header']) + '\n'
        else:
            logging.error(__name__ + ' :: No header in JSON.')

        if 'data' in data:
            for user_key in data['data']:

                # format the data to string
                # e.g. [1, 2.0, False]
                row = str(data['data'][user_key])[1:-1].split(',')
                row = [e.strip() for e in row]

                elems = args.separator.join(row)
                content += str(user_key) + args.separator + elems + '\n'
        else:
            logging.error(__name__ + ' :: No data in JSON.')

        logging.debug(__name__ + ' :: Writing to file...')
        with open(config.CSV_DIR + filename + '.csv', 'wb') as f:
            f.write(content)

    logging.debug(__name__ + ' :: Shutting down json2csv...')


def cli():
    exit(main())


if __name__ == '__main__':
    cli()
