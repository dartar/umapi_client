#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
CLI for UMAPI client.
"""

from umapi_client import config, logging, TIMESTAMP_FORMAT, RESPONSE_FORMAT
from umapi_client.client import UMAPIClient
from re import search

from rafutils import enum
import json
import argparse
from datetime import datetime
from sys import exit

__author__ = "ryan faulkner"
__email__ = 'rfaulkner@wikimedia.org'
__date__ = "2013-03-27"
__license__ = "GPL (version 2 or later)"


# Enum for response types
RESPONSE_TYPES = enum('JSON', 'JOB_RUNNING', 'JOB_STARTED', 'UNKNOWN')


def parseargs():
    """
        Parse command line arguments. Returns *args*, the list of arguments
        left over after processing.
    """

    parser = argparse.ArgumentParser(
        description="Requests a url from the Wimedia user metrics API.",
        epilog="",
        conflict_handler="resolve",
        usage="umapi_client [url]"
    )

    parser.allow_interspersed_args = False

    # Global options.
    parser.add_argument('url')
    parser.add_argument('-s',
                        '--save_file',
                        action='store_true',
                        help='store response on file.')
    parser.add_argument('-t',
                        '--timestamp',
                        action='store_true',
                        help='timestamp the filename.')
    parser.add_argument('-p',
                        '--print_res',
                        action='store_true',
                        help='prints response.')

    args = parser.parse_args()
    return args


def format_filename(args):
    """ Formats the file name optionally emitted byt the client """

    # Parse url path
    bits = args.url.split('/')

    try:
        suffix = 'Q'.join(bits[2].split('?'))
        suffix = '_'.join(suffix.split('&'))
        suffix = '-'.join(suffix.split('='))
        suffix = bits[1] + '_' + suffix + '_'
    except KeyError:
        logging.error(__name__ + ' :: Couldn\'t parse url for filename.')
        suffix = ''

    filename = 'umapi_client_' + suffix
    if args.timestamp:
        filename += datetime.now().strftime(TIMESTAMP_FORMAT)[:8]
    return filename + RESPONSE_FORMAT


def response_type(response):
    """ Determine the type of response. """

    # TODO add case to detect if job is running
    if search(r'</html>', response) and search(r'Processing', response):
        logging.debug(__name__ + ' :: Job initiated.')
        return RESPONSE_TYPES.JOB_STARTED
    elif search(r'</html>', response):
        logging.error(__name__ + ' :: Unknown response from API.')
        return RESPONSE_TYPES.UNKNOWN
    else:
        logging.debug(__name__ + ' :: Job processed.  Retrieved response.')
        return RESPONSE_TYPES.JSON


def main():

    # e.g. url = 'cohorts/ryan_test_2/bytes_added'
    args = parseargs()

    # Initialize a requester object
    logging.debug(__name__ + ' :: Attempting to create cookie jar, '
                             'logging in ..')
    umapi_req = UMAPIClient(config.UMAPI_USER,
                            config.UMAPI_PASS)

    # TODO Validate the url

    # Make request
    logging.debug(__name__ + ' :: Login successful. Making request: {0}'.
        format(config.URL_ROOT + str(args.url)))

    try:
        response = umapi_req.get_request(config.URL_ROOT + str(args.url))
    except Exception as e:
        logging.error(__name__ + ' :: Bad response - {0}.'.format(e.message))
        return


    if response_type(response) == RESPONSE_TYPES.JSON:
        # "JSONify" response output
        response_str = str(json.loads(response))

        # Handle response
        if args.save_file:
            filename = format_filename(args)

            logging.debug(__name__ + ' :: Writing response to file: {0}'.
                format(filename))

            with open(config.JSON_DIR + filename, 'wb') as f:
                f.write(response_str)

    if args.print_res:
        print str(json.loads(response))


def cli():
    exit(main())


if __name__ == '__main__':
    cli()
