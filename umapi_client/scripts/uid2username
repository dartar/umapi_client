#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Simple script to convert MediaWiki user table IDs to names.
"""

from umapi_client import config, logging
from MySQLdb import escape_string, connect

import json
from re import sub
import argparse
from sys import exit


__author__ = "ryan faulkner"
__email__ = 'rfaulkner@wikimedia.org'
__date__ = "2013-04-09"
__license__ = "GPL (version 2 or later)"


# Query for USER table to extract user name for user ID
QUERY =\
"""
    SELECT user_name
    FROM <project>.user
    WHERE user_id = %s
"""


def parseargs():
    """
        Parse command line arguments. Returns *args*, the list of arguments
        left over after processing.
    """

    parser = argparse.ArgumentParser(
        description="Requests a url from the Wimedia user metrics API.",
        epilog="",
        conflict_handler="resolve",
        usage="umapi_client [url]"
    )

    parser.allow_interspersed_args = False

    # Global options.
    parser.add_argument('-u',
                        '--uid',
                        type=str,
                        default='0',
                        help='UID of Wikipedia user.')
    parser.add_argument('-p',
                        '--project',
                        type=str,
                        default='enwiki',
                        help='URI of request.')
    parser.add_argument('-s',
                        '--save_file',
                        action='store_true',
                        help='store response on file.')
    parser.add_argument('-f',
                        '--infile',
                        type=str,
                        help='Input separated value filename.')
    parser.add_argument('-S',
                        '--separator',
                        type=str,
                        default=',',
                        help='Input file separator.')
    parser.add_argument('-o',
                        '--uname_out',
                        action='store_true',
                        help='prints response.')

    args = parser.parse_args()
    return args


def main():
    """
    Main.

    1. Parseargs
    2. Initialize request object
    3. Validation
    4. Call request handler.

    """

    logging.debug(__name__ + ' :: Setting up.')

    # e.g. url = 'cohorts/ryan_test_2/bytes_added'
    args = parseargs()
    mysql_kwargs = config.connections[config.PROJECT_DB_MAP[args.project]]
    uname_dict = dict()

    conn = None
    cur = None

    try:

        conn = connect(**mysql_kwargs)
        cur = conn.cursor()

        # Escape project and embed in query
        project = escape_string(''.join(args.project.strip().split()))
        query_inst = sub(r'<project>', project, QUERY)

        if args.infile:
            with open(config.IN_DIR + args.infile) as f:
                uid_list = f.read().strip().split(args.separator)

                for uid in uid_list:
                    logging.debug(__name__ + ' :: Processing: {0}.'.
                                  format(args.uid))

                    cur.execute(query_inst, int(uid))
                    uname = cur.fetchone()[0]
                    uname_dict[args.uid] = uname

        else:
            logging.debug(__name__ + ' :: Processing: {0}.'.
                          format(str(args.uid)))

            cur.execute(query_inst, int(args.uid))
            uname = cur.fetchone()[0]
            uname_dict[args.uid] = uname

        if args.save_file:
            filename = config.CSV_DIR + 'uid2uname.txt'
            logging.debug(__name__ + ' :: Writing response to file: {0}'.
                          format(filename))

            with open(config.CSV_DIR + 'uid2uname.txt', 'wb') as f:
                f.write(json.dumps(uname_dict))

        if args.uname_out:
            print str(json.dumps(uname_dict))

    finally:
        if conn:
            del conn
        if cur:
            del cur

    logging.debug(__name__ + ' :: Shutting down.')


def cli():
    exit(main())


if __name__ == '__main__':
    cli()
