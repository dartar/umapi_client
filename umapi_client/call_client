#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
CLI for UMAPI client.
"""

from umapi_client import config, logging, TIMESTAMP_FORMAT, RESPONSE_FORMAT
from umapi_client.client import UMAPIClient

import json
import argparse
from datetime import datetime
from sys import exit

__author__ = "ryan faulkner"
__email__ = 'rfaulkner@wikimedia.org'
__date__ = "2013-03-27"
__license__ = "GPL (version 2 or later)"


def parseargs():
    """
        Parse command line arguments. Returns *args*, the list of arguments
        left over after processing.
    """

    parser = argparse.ArgumentParser(
        description="Requests a url from the Wimedia user metrics API.",
        epilog="",
        conflict_handler="resolve",
        usage="umapi_client [url]"
    )

    parser.allow_interspersed_args = False

    # Global options.
    parser.add_argument('url')
    parser.add_argument('-s',
                        '--save_file',
                        action='store_true',
                        help='store response on file')
    parser.add_argument('-t',
                        '--timestamp',
                        action='store_true',
                        help='timestamp the filename')

    args = parser.parse_args()
    return args


def format_filename(args):
    """ Formats the file name optionally emitted byt the client """

    # Parse url path
    bits = args.url.split('/')

    try:
        suffix = bits[1] + '_' + bits[2] + '_'
    except KeyError:
        logging.error(__name__ + ' :: Couldn\'t parse url for filename.')
        suffix = ''

    filename = 'umapi_client_' + suffix
    if args.timestamp:
        filename += datetime.now().strftime(TIMESTAMP_FORMAT)[:8]
    return filename + RESPONSE_FORMAT


def main():

    # e.g. url = 'cohorts/ryan_test_2/bytes_added'
    args = parseargs()

    # Initialize a requester object
    umapi_req = UMAPIClient(config.UMAPI_USER,
                            config.UMAPI_PASS)

    # Validate the url

    # Make request
    try:
        response = umapi_req.get_request(config.URL_ROOT + str(args.url))
    except Exception as e:
        logging.error(__name__ + ' :: Bad response - {0}.'.format(e.message))
        return

    # "JSONify" response output
    response_str = str(json.loads(response))

    # Handle response
    if args.save_file:
        filename = format_filename(args)
        with open(filename, 'wb') as f:
            f.write(response_str)
    else:
        print response_str


def cli():
    exit(main())


if __name__ == '__main__':
    cli()
